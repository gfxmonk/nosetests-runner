#!/usr/bin/python
import cgi
import os
import sys

config_base = os.path.expanduser('~/.config/nosetests')
config_path = os.path.join(config_base, '0install-plugin-uris')
feed_path = os.path.join(config_base, '0install-feed.xml')
runner_uri = 'http://gfxmonk.net/dist/0install/nosetests-plugin-resolver.xml'
self_uri = 'http://localhost/nonexistant/path/user-specific-nosetest-plugin-set.xml'

def requirement(uri):
	uri = cgi.escape(uri, quote=True)
	return '<requires interface="%s"/>' % (uri,)

def process_args(args=None):
	if args is None:
		args = sys.argv[1:]
	remaining_args = []
	addplugins = set()
	removeplugins = set()
	while args:
		arg = args.pop(0)
		if arg == '--add-plugin':
			addplugins.add(args.pop(0))
		elif arg == '--remove-plugin':
			removeplugins.add(args.pop(0))
		elif arg == '--list-plugins':
			plugins = load_and_update_config(addplugins=addplugins, removeplugins=removeplugins)
			print "\n".join(plugins)
			sys.exit(0)
		else:
			remaining_args.append(arg)
	return remaining_args, addplugins, removeplugins

def update_config(plugins, lines, addplugins, removeplugins):
	existing_uris = set(plugins)
	addplugins = addplugins.difference(existing_uris)
	plugins = set(plugins).union(addplugins).difference(removeplugins)
	if addplugins or removeplugins:
		ensure_config_dir_exists()
		with open(config_path, 'w') as uri_list:
			for line in lines:
				if line.strip() in removeplugins:
					continue
				else:
					uri_list.write(line)
			for uri in addplugins:
				uri_list.write(uri + "\n")
	return plugins

def ensure_config_dir_exists():
	if not os.path.isdir(config_base):
		os.mkdir(config_base)
	
def load_and_update_config(addplugins, removeplugins):
	try:
		with open(config_path) as uri_list:
			uri_list_lines = [line.strip() for line in uri_list]
			plugins = [line.strip() for line in uri_list_lines if line.strip() and not line.strip().startswith('#')]
	except (OSError, IOError):
		plugins = []
		uri_list_lines = []
	plugins = update_config(plugins=plugins, lines=uri_list_lines, addplugins=addplugins, removeplugins=removeplugins)
	return plugins

def write_feed(plugins, force_update=False):
	if force_update is False and os.path.exists(feed_path):
		return
	import getpass
	username = getpass.getuser()
	requirement_elems = "\n".join(map(requirement, plugins))
	ensure_config_dir_exists()
	with open(feed_path, 'w') as f:
		f.write("""<?xml version="1.0" ?>
			<?xml-stylesheet type='text/xsl' href='interface.xsl'?>
			<interface uri="{uri}" xmlns="http://zero-install.sourceforge.net/2004/injector/interface">
				<name>Nosetests</name>
				<summary>Nosetests with plugins for {user}</summary>
				<description>
				</description>

				<group>
					<command name="run">
						<runner interface="{runner_uri}"/>
					</command>
					{dependencies}
					<implementation id="." version="0.0.1"/>
				</group>
			</interface>\n""".format(user=username, uri=self_uri, runner_uri=runner_uri, dependencies=requirement_elems))

def main():
	nosetest_args, addplugins, removeplugins = process_args()
	plugin_uris = load_and_update_config(addplugins, removeplugins)
	write_feed(plugin_uris, force_update=bool(addplugins or removeplugins))
	os.execvp('0launch', ['0launch', feed_path] + nosetest_args)

if __name__ == '__main__':
	main()
